#include <iostream>

using namespace std;

void printDouble(double d){
    std::cout<<d;    
}

int main()
{   
    printDouble(5);
    return 0;
}

Because the type of the parameter and the type of the argument do not match, the compiler will see if it can implicitly convert the type of the argument to the type of the parameter. In this case, using the numeric conversion rules, int value 5 will be converted to double value 5.0 and because we’re passing by value, parameter d will be copy initialized with this value.


#include <iostream>

using namespace std;

class Foo{
    
    private:
        int m_x{};
    public:
        Foo(int x){
            m_x = x;
        }
        int getX(){
            return m_x;
        }
};


void printFoo(Foo d){
    std::cout<<d.getX();    
}

int main()
{   
    printFoo(5);
    return 0;
}

The C++ standard doesn’t have specific rules that tell the compiler how to convert values to (or from) a program-defined type eg from int to double etc.

Instead, the compiler will look to see if we have defined some function that it can use to perform such a conversion. Such a function is called a user-defined conversion.


So in this case, when printFoo(5) is called, parameter f is copy initialized using the Foo(int) constructor with 5 as an argument!

A constructor that can be used to perform an implicit conversion is called a converting constructor. By default, all constructors are converting constructors.


// point of failure
// error: could not convert ‘(const char*)"rohit"’ from ‘const char*’ to ‘rohit’
// works for double int data types
#include <iostream>

using namespace std;
class rohit{
        std::string_view m_x;
    public:
        rohit(std::string_view x){
            m_x = x;
        }
        std::string_view getX(){
            return m_x;
        }
};

void print(rohit s){
    cout<<s.getX();
}

int main()
{
    print("rohit");
    return 0;
}

works if we use 
int main()
{
    using namespace std::literals;
    print("rohit"sv);
    return 0;
}

or do implicit conversion
 print(rohit{"rohit"});


Stop implicit conversion

#include <iostream>

class Dollars
{
private:
    int m_dollars{};

public:
    explicit Dollars(int d)
        : m_dollars{ d }
    {
    }

    int getDollars() { return m_dollars; }
};

void print(Dollars d)
{
    std::cout << "$" << d.getDollars();
}

int main()
{
    print(5);

    return 0;
}
// use explicit

this also works : print(Dollars{5});

----------------------------------------------------------------------------

#include <iostream>

using namespace std;
explicit void fn(double d){
    
}
int main()
{
    fn(5);
    cout<<"Hello World";

    return 0;
}
// error: ‘explicit’ outside class declaration, can be used only for classes


#include <iostream>

class Foo
{
public:
    explicit Foo() // note: explicit (just for sake of example)
    {
    }

    explicit Foo(int x) // note: explicit
    {
    }
};

Foo getFoo()
{
    // explicit Foo() cases
    return Foo{ };   // ok
    return { };      // error: can't implicitly convert initializer list to Foo

    // explicit Foo(int) cases
    return 5;        // error: can't implicitly convert int to Foo
    return Foo{ 5 }; // ok
    return { 5 };    // error: can't implicitly convert initializer list to Foo
}

int main()
{
    return 0;
}
