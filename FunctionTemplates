#include <iostream>
#include <cstring>
using namespace std;

// There is no difference between the typename and class keywords in this context. 
//You will often see people use the class keyword since it was introduced into the language earlier. 
//However, we prefer the newer typename keyword, because it makes it clearer that the type template parameter can be replaced by any type (such as a fundamental type), not just class types.

template<class s>
void fn(s t){
	cout<<t;
}

int main(){
	fn("rohit");
}

When the compiler encounters the function call max<int>(1, 2), it will determine that a function definition for max<int>(int, int) does not already exist. Consequently, the compiler will use our max<T> function template to create one.

The process of creating functions (with specific types) from function templates (with template types) is called function template instantiation (or instantiation for short). When this process happens due to a function call, it’s called implicit instantiation. An instantiated function is often called a function instance (instance for short) or a template function. Function instances are normal functions in all regards.

#include <iostream>

template <typename T>
T max(T x, T y)
{
    return (x < y) ? y : x;
}

int main()
{
    std::cout << max<int>(1, 2) << '\n'; // instantiates and calls function max<int>(int, int)

    return 0;
}


________________________________________________________________


//instantiation happens like, function template instantiaition
template<class s>
void fn(s t){
	cout<<t;
}

//becomes:
template<class s>
void fn(s t);

template<>
void fn<int>(int t){
	cout<<t;
}

int main(){
	fn<int>(2);
}


-----------------------------------------------------------------------
#include <iostream>
#include <cstring>
using namespace std;

//automatic deduction of function
template<typename T>
void fn(T value){
	cout<<value;
}

void fn(int s){
	cout<<"i am here "<< s;
}
int main(){

	//automatic deduction of function
	fn<int>(2); // 2
	fn<>(2); // 2
	fn(2); // 2

	// if normal function is present along with templates then fn(2) will most likely call that
	fn(2); //i am here 2

}

// T is a type template parameter
// double is a non-template parameter
template <typename T>
int someFcn (T, double)
{
    return 5;
}

int main()
{
    someFcn(1, 3.4); // matches someFcn(int, double)
    someFcn(1, 3.4f); // matches someFcn(int, double) -- the float is promoted to a double
    someFcn(1.2, 3.4); // matches someFcn(double, double)
    someFcn(1.2f, 3.4); // matches someFcn(float, double)
    someFcn(1.2f, 3.4f); // matches someFcn(float, double) -- the float is promoted to a double

    return 0;
}


--------------------------------------------

 error: no match for ‘operator+’ (operand types are ‘std::__cxx11::basic_string’ and ‘int’)
    7 |     return x + 1;

#include <iostream>
#include <string>
using namespace std;
template <typename T>
T addOne(T x)
{
    return x + 1;
}

int main()
{
    string s{"hello"};
    addOne(s);
    return 0;
}


--------------------------------------------

https://www.learncpp.com/cpp-tutorial/function-template-instantiation/

This works somehow  but fix is below:
#include <iostream>

template <typename T>
T addOne(T x)
{
    return x + 1;
}

int main()
{
    std::cout << addOne("Hello, world!") << '\n'; // ello, world!

    return 0;
}

#include <iostream>
#include <string>

template <typename T>
T addOne(T x)
{
    return x + 1;
}

// Use function template specialization to tell the compiler that addOne(const char*) should emit a compilation error
template <>
const char* addOne(const char* x) = delete;

int main()
{
    std::cout << addOne("Hello, world!") << '\n'; // compile error

    return 0;
}


Read Using function templates in multiple files from https://www.learncpp.com/cpp-tutorial/function-template-instantiation/
_____________________________________________________________________________

This is error prone
#include <iostream>
using namespace std;

template<typename T>
void fn(T x, T y){
	cout<<x<<y;
}

int main(){

	fn(2,3.3);//  error: no matching function for call to 'fn'

	return 0;
}

This will also not work

int main(){

	fn<int, double>(2,3.3);

	return 0;
}

type conversion is done only when resolving function overloads, not when performing template argument deduction.

This will work
1. Tell its double to compiler

int main(){

	fn<double>(2,3.3);

	return 0;
}

2. make a double non-template fn
void fn(double x, double y){
	cout<<x<<y;
}

3.
int main(){

	fn(static_cast<double>(2),3.3);

	return 0;
}

4.
template<typename T, typename U>
void fn(T x, U y){
	cout<<x<<y;
}


Two ways of using abbreviated function template c++20 and beyond

#include <iostream>
using namespace std;

template<typename T>
auto fn(T x, T y){
	cout<<x<<y;
}

auto fn(auto x, auto y){
	cout<<x<<y<<"rohit";
}
int main(){

	fn<double>(2,3.3);

	return 0;
}

----------------------------------------------------------
Non- type parameter


#include <iostream>
using namespace std;

template<int N> // use N for int non-type parameter
void print(){
	cout<<N;
}

template<>
void print<5>(){
	cout<<"5 rohit";
}

int main(){
	print<5>();
	return 0;
}

Read What are non-type template parameters useful for? in https://www.learncpp.com/cpp-tutorial/non-type-template-parameters/

#include<cmath>
#include <iostream>

template<double D> // requires c++ 20 for floating non type op's
double getsqrt(){
	static_assert( D >= 0 , " value should be positive");// this will result in compile time error if -ve
	if constexpr( D >= 0)
		return std::sqrt(D);
	return 0.0;
}

int main(){
	std::cout<<getsqrt<5.0>();
	return 0;
}


auto deduction using auto : C++17
#include <iostream>

template <auto N> // deduce non-type template parameter from template argument
void print()
{
    std::cout << N << '\n';
}

int main()
{
    print<5>();   // N deduced as int `5`
    print<'c'>(); // N deduced as char `c`

    return 0;
}
