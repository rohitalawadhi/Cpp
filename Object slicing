#include <iostream>

using namespace std;
class base{
    int c{};
    public:
    virtual void fn(){
        cout<<"I am in base\n";
    }
    
};

class derived: public base{
    public:
    void fn() override{
        cout<<"I am in derived\n";
    }
    
};
int main()
{
    derived obj2;
    base &obj = obj2;
    obj.fn();// I am in derived
    base obj1 = obj2;
    obj1.fn();// I am in base , derived is sliced off.
    return 0;
}

Error case:

    derived o;
    base r;
    o = r;
    o.fn();

main.cpp: In function ‘int main()’:
main.cpp:37:9: error: no match for ‘operator=’ (operand types are ‘derived’ and ‘base’)
   37 |     o = r;
      |         ^
main.cpp:21:7: note: candidate: ‘constexpr derived& derived::operator=(const derived&)’
   21 | class derived: public base{
      |       ^~~~~~~
main.cpp:21:7: note:   no known conversion for argument 1 from ‘base’ to ‘const derived&’
main.cpp:21:7: note: candidate: ‘constexpr derived& derived::operator=(derived&&)’
main.cpp:21:7: note:   no known conversion for argument 1 from ‘base’ to ‘derived&&’
